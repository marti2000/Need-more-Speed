
            //Dictionary<string, Draw_road> road_planner = new Dictionary<string, Draw_road>();



            /*
            MediaElement background_sound = new MediaElement();

            Backgroundsound.LoadedBehavior = System.Windows.Controls.MediaState.Manual;
            Backgroundsound.Play();*/

            //Backgroundsound.

            //Path source_background_sound = new Path();


            /*string startPath = @"C:\Benutzer\";//Der absolute Ausgangspfad
            string relative = @"..\Windows\explorer.exe";//Der relative Pfad
            string st4ring = @"..\Windows\explorer.exe";//Der relative Pfad
            string absolut = Path.GetFullPath(Path.Combine(startPath, relative));//Die ermittlung eines absoluten Pfades*/
            /*
            background_sound.Source = new Uri("Need-more-Speed/Julien Bam - Ready to fight(prod. by Vincent Lee).mp3", UriKind.Relative); //@"C:\Users\Marcel Vögeli\source\repos\marti2000\Need-more-Speed";//"..//Need-more-Speed//Julien Bam - Ready to fight(prod. by Vincent Lee).mp3";

            background_sound.LoadedBehavior = System.Windows.Controls.MediaState.Manual;

            background_sound.Volume = 100;

            background_sound.Play();

            Uri source = new Uri(@"Need-more-Speed/Julien Bam - Ready to fight(prod. by Vincent Lee).mp3", UriKind.Relative);

            

            MediaElement test = new MediaElement();
            test.Source = new Uri(@"C:\Users\Marcel Vögeli\source\repos\marti2000\Need-more-Speed\Julien Bam - Ready to fight(prod. by Vincent Lee).mp3");//@"C:\Users\Marcel Vögeli\source\repos\marti2000\Need-more-Speed\Julien Bam - Ready to fight(prod. by Vincent Lee).mp3";
            //(new Uri("Need-more-Speed/Julien Bam - Ready to fight(prod. by Vincent Lee).mp3", UriKind.RelativeOrAbsolute)new Uri(source.AbsoluteUri));*/
            //Path.GetFullPath((new Uri(absolute_path)).LocalPath);
            //test.Load();
            /*test.LoadedBehavior = System.Windows.Controls.MediaState.Manual;
            test.Play();*/
            /*
            Road.curve_0Degree(1, 1, 100);
            Road.curve_90Degree(2, 1, 100);
            Road.curve_180Degree(2, 2, 100);
            Road.curve_270Degree(1, 2, 100);

            Road.straight_horizontal(3, 3, 100);
            */
            /*
            road_planner.Add("straight.horizontal", Road); 
            road_planner.Add("straight.vertical", Road);
            road_planner.Add("curve.0Degree", Road);
            road_planner.Add("curve.90Degree", Road);
            road_planner.Add("curve.180Degree", Road);
            road_planner.Add("curve.270Degree", Road);*/




            /*red_car.Position_x = 200;
            red_car.Position_y = 200;
            red_car.Left = true;
            red_car.Down = true;*/





            //int tester = road_planner["straight.horizontal"];
            /*
            for(int i = 0; i>10; i++)
            {
                Line[] street = new Line[10];
                street[i] = new Line() { Name = "street" + i };
                street[i].Stroke = Brushes.Gray;
                street[i].X1 = 1;
                street[i].X2 = 50;
                street[i].Y1 = 1; 
                street[i].Y2 = 50;

                street[i].StrokeThickness = 2;
                racingtrack.Children.Add(street[i]);
            }*/


            /*SolidColorBrush street = new SolidColorBrush(Color.FromArgb(255, 0, 0, 0));
            Pen pen = new Pen(street, 10);
            Background. .DrawLine(pen, 20, 10, 300, 100);*/



            /*street.X1 = 10;
            street.X2 = 50;
            street.Y1 = 10;
            street.Y2 = 50;

            street.StrokeThickness = 2;
            racingtrack.Children.Add(street);*/

			/*
                    int.TryParse(Read_app_data("Millisecondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                    if (((result > time.Seconds) || (result == 0)) && (end_race_player_1))
                    {
                        int.TryParse(Read_app_data("Secondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                        if (((result >= time.Seconds) || (result == 0)) && (end_race_player_1))
                        {
                            int.TryParse(Read_app_data("Minutes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                            if (((result >= time.Minutes)) && (end_race_player_1))
                            {
                                /*int.TryParse(Read_app_data("Minutes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                                if (((result >= time.Minutes)) && (end_race_player_1))
                                {
                                    int.TryParse(Read_app_data("Secondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                                    if (((result >= time.Seconds) || (result == 0)) && (end_race_player_1))
                                    {
                                        int.TryParse(Read_app_data("Millisecondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                                        if (((result > time.Seconds) || (result == 0)) && (end_race_player_1))
                                        {*/



/*
                for (int counter_ = 1; counter_ <= 10; counter_++)
                {

                    int result;
                    int result1;
                    int result2;
                    /*
                    int.TryParse(Read_app_data("Millisecondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                    int.TryParse(Read_app_data("Secondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result1);
                    int.TryParse(Read_app_data("Minutes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result2);

                    TimeSpan old_best = new TimeSpan(0, 0, result2, result1, result);

                    if (((time.Ticks < old_best.Ticks) || (old_best.Ticks == 0)) && (time.Ticks > 0))
                    {
                        name_box = new Name_box();
                                name_box.Show();
                                name_box.set_player_and_place(2, counter_);

                                while (name_box.value_ready == false)
                                {
                                    this.Hide();
                                    await Task.Delay(300);
                                }
                                //sort by the best time
                                if (counter_ < 10)
                                {
                                    for (int _counter_ = 9; _counter_ >= counter_; _counter_--)
                                    {
                                
                                        Write_app_storage("Name_TOP_" + (_counter_ + 1).ToString() + "_" + choseed_map.ToString(), Read_app_data("Name_TOP_" + _counter_.ToString() + "_" + choseed_map.ToString()));
                                        Write_app_storage("Minutes_TOP_" + (_counter_ + 1).ToString() + "_" + choseed_map.ToString(), Read_app_data("Minutes_TOP_" + _counter_.ToString() + "_" + choseed_map.ToString()));
                                        Write_app_storage("Secondes_TOP_" + (_counter_ + 1).ToString() + "_" + choseed_map.ToString(), Read_app_data("Secondes_TOP_" + _counter_.ToString() + "_" + choseed_map.ToString()));
                                        Write_app_storage("Millisecondes_TOP_" + (_counter_ + 1).ToString() + "_" + choseed_map.ToString(), Read_app_data("Millisecondes_TOP_" + _counter_.ToString() + "_" + choseed_map.ToString()));
                                        
                                    }
                                }

                                
                                Write_app_storage("Name_TOP_" + counter_.ToString() + "_" + choseed_map.ToString(), name_box.name_of_player);
                                Write_app_storage("Minutes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString(), time.Minutes.ToString());
                                Write_app_storage("Secondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString(), time.Seconds.ToString());
                                Write_app_storage("Millisecondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString(), time.Milliseconds.ToString());
                                

                                name_box.Close();
                                this.Show();
                                counter_ = 11;
                    }
                }*/



				add_road(2, 1, Straight_horizontal);
                        add_road(3, 1, Straight_horizontal);
                        add_road(7, 1, Straight_horizontal);
                        add_road(8, 1, Straight_horizontal);
                        add_road(9, 1, Straight_horizontal);
                        add_road(10, 1, Straight_horizontal);
                        add_road(10, 5, Straight_horizontal);
                        add_road(6, 5, Straight_horizontal);
                        add_road(2, 5, Straight_horizontal);

                        add_road(11, 3, Straight_vertical);
                        add_road(11, 4, Straight_vertical);
                        add_road(9, 4, Straight_vertical);
                        add_road(7, 4, Straight_vertical);
                        add_road(1, 4, Straight_vertical);
                        add_road(1, 2, Straight_vertical);

                        add_road(1, 3, Straight_vertical_finish);

                        add_road(11, 2, Straight_vertical_checkpoint);

                        add_road(8, 3, Straight_horizontal_checkpoint);
                        add_road(5, 2, Straight_horizontal_checkpoint);
                        add_road(4, 4, Straight_horizontal_checkpoint);

                        add_road(1, 1, Curve_0Degree);
                        add_road(6, 1, Curve_0Degree);
                        add_road(7, 3, Curve_0Degree);
                        add_road(3, 4, Curve_0Degree);

                        add_road(4, 1, Curve_90Degree);
                        add_road(11, 1, Curve_90Degree);
                        add_road(9, 3, Curve_90Degree);
                        add_road(5, 4, Curve_90Degree);

						add_road(6, 2, Curve_180Degree);
                        add_road(11, 5, Curve_180Degree);
                        add_road(7, 5, Curve_180Degree);
                        add_road(3, 5, Curve_180Degree);

                        add_road(4, 2, Curve_270Degree);
                        add_road(9, 5, Curve_270Degree);
                        add_road(5, 5, Curve_270Degree);
                        add_road(1, 5, Curve_270Degree);




        /*private void add_road(double x_position, double y_position, string type)
        {
            Point x_y_position = new Point();
            x_y_position.X = x_position;
            x_y_position.Y = y_position;
            road_planner.Add(x_y_position, type);
        }

        private void draw_road(double x_position, double y_position, double grid)
        {
            string type = "";
            /*road_planner.TryGetValue(new Point(x_position, y_position), out type);
            
            if(type == Straight_horizontal)
            {
                straight_horizontal(x_position, y_position, grid);
            }
            else if (type == Straight_vertical)
            {
                straight_vertical(x_position, y_position, grid);
            }
            else if (type == Straight_vertical_finish)
            {
                straight_vertical_finish(x_position, y_position, grid);
            }
            else if (type == Curve_0Degree)
            {
                curve_0Degree(x_position, y_position, grid);
            }
            else if (type == Curve_90Degree)
            {
                curve_90Degree(x_position, y_position, grid);
            }
            else if (type == Curve_180Degree)
            {
                curve_180Degree(x_position, y_position, grid);
            }
            else if (type == Curve_270Degree)
            {
                curve_270Degree(x_position, y_position, grid);
            }
            else if (type == Straight_vertical_checkpoint)
            {
                straight_vertical_checkpoint(x_position, y_position, grid);
            }
            else if(type == Straight_horizontal_checkpoint)
            {
                straight_horizontal_checkpoint(x_position, y_position, grid);
            }
        }*/

		public void straight_horizontal(double x_offset, double y_offset, double grid)
        {
            x_offset = x_offset * grid;
            y_offset = y_offset * grid;

            Rectangle street = new Rectangle();
            street.Width = grid;
            street.Height = grid;
            street.Stroke = Brushes.Gray;
            street.Fill = Brushes.Gray;
            Canvas.SetTop(street, y_offset);
            Canvas.SetLeft(street, x_offset);
            myCanvas.Children.Add(street);
        }
        public void straight_horizontal_checkpoint(double x_offset, double y_offset, double grid)
        {
            x_offset = x_offset * grid;
            y_offset = y_offset * grid;

            Rectangle street = new Rectangle();
            street.Width = grid;
            street.Height = grid;
            street.Stroke = Brushes.Gray;
            street.Fill = Brushes.Gray;
            Canvas.SetTop(street, y_offset);
            Canvas.SetLeft(street, x_offset);
            myCanvas.Children.Add(street);

            Rectangle line = new Rectangle();
            line.Width = 3;
            line.Height = grid;
            line.Stroke = Brushes.Yellow;
            line.Fill = Brushes.Yellow;
            Canvas.SetLeft(line, x_offset + (grid / 2));
            Canvas.SetTop(line, y_offset);
            myCanvas.Children.Add(line);


        }

        public void straight_vertical(double x_offset, double y_offset, double grid)
        {
            x_offset = x_offset * grid;
            y_offset = y_offset * grid;

            Rectangle street = new Rectangle();
            street.Width = grid;
            street.Height = grid;
            street.Stroke = Brushes.Gray;
            street.Fill = Brushes.Gray;
            Canvas.SetTop(street, y_offset);
            Canvas.SetLeft(street, x_offset);
            myCanvas.Children.Add(street);
        }
        public void straight_vertical_checkpoint(double x_offset, double y_offset, double grid)
        {
            x_offset = x_offset * grid;
            y_offset = y_offset * grid;

            Rectangle street = new Rectangle();
            street.Width = grid;
            street.Height = grid;
            street.Stroke = Brushes.Gray;
            street.Fill = Brushes.Gray;
            Canvas.SetTop(street, y_offset);
            Canvas.SetLeft(street, x_offset);
            myCanvas.Children.Add(street);

            Rectangle line = new Rectangle();
            line.Width = grid;
            line.Height = 3;
            line.Stroke = Brushes.Yellow;
            line.Fill = Brushes.Yellow;
            Canvas.SetTop(line, y_offset + (grid / 2));
            Canvas.SetLeft(line, x_offset);
            myCanvas.Children.Add(line);
            

        }
        public void straight_vertical_finish(double x_offset, double y_offset, double grid)
        {
            x_offset = x_offset * grid;
            y_offset = y_offset * grid;

            Rectangle street = new Rectangle();
            street.Width = grid;
            street.Height = grid;
            street.Stroke = Brushes.Gray;
            street.Fill = Brushes.Gray;
            Canvas.SetTop(street, y_offset);
            Canvas.SetLeft(street, x_offset);
            myCanvas.Children.Add(street);
            double zaehler;
            for ( zaehler = 0; zaehler < 10; zaehler ++)
            {
                Rectangle[] finish_line_black = new Rectangle[Convert.ToInt16(grid / 10) + 10];
                Rectangle[] finish_line_white = new Rectangle[Convert.ToInt16(grid / 10) + 10];


                finish_line_black[Convert.ToInt16(zaehler)] = new Rectangle() { Name = "finish_line_black" + Convert.ToInt16(zaehler) };

                finish_line_black[Convert.ToInt16(zaehler)].Height = grid / 10;
                finish_line_black[Convert.ToInt16(zaehler)].Width = grid / 10;

                finish_line_black[Convert.ToInt16(zaehler)].Stroke = Brushes.Black;
                finish_line_black[Convert.ToInt16(zaehler)].Fill = Brushes.Black;


                finish_line_white[Convert.ToInt16(zaehler)] = new Rectangle() { Name = "finish_line_white" + Convert.ToInt16(zaehler) };

                finish_line_white[Convert.ToInt16(zaehler)].Height = grid / 10;
                finish_line_white[Convert.ToInt16(zaehler)].Width = grid / 10;

                finish_line_white[Convert.ToInt16(zaehler)].Stroke = Brushes.White;
                finish_line_white[Convert.ToInt16(zaehler)].Fill = Brushes.White;

                if (zaehler % 2 == 0)
                {
                    Canvas.SetTop(finish_line_black[Convert.ToInt16(zaehler)], y_offset + grid / 2);
                    Canvas.SetTop(finish_line_white[Convert.ToInt16(zaehler)], y_offset + grid / 2 - grid / 10);
                }
                else
                {
                    Canvas.SetTop(finish_line_black[Convert.ToInt16(zaehler)], y_offset + grid / 2 - grid / 10);
                    Canvas.SetTop(finish_line_white[Convert.ToInt16(zaehler)], y_offset + grid / 2);
                }

                Canvas.SetLeft(finish_line_black[Convert.ToInt16(zaehler)], x_offset + (zaehler * (grid / 10)));
                Canvas.SetLeft(finish_line_white[Convert.ToInt16(zaehler)], x_offset + (zaehler * (grid / 10)));

                myCanvas.Children.Add(finish_line_black[Convert.ToInt16(zaehler)]);
                myCanvas.Children.Add(finish_line_white[Convert.ToInt16(zaehler)]);
            }
            
        }

        public void curve_0Degree(double x_offset, double y_offset, double grid)
        {
            double x_curve = 0;
            double y_curve = 0;

            x_offset = x_offset * grid;
            y_offset = y_offset * grid + grid;

            for (x_curve = 0; x_curve <= grid; x_curve++)
            {
                y_curve = Math.Sqrt(Math.Pow(grid, 2) - Math.Pow(x_curve, 2));

                Line[] street = new Line[Convert.ToInt16(grid) + 1];
                street[Convert.ToInt16(x_curve)] = new Line() { Name = "street" + Convert.ToInt16(x_curve) };
                street[Convert.ToInt16(x_curve)].Stroke = Brushes.Gray;
                street[Convert.ToInt16(x_curve)].X1 = x_offset + grid - Convert.ToInt16(x_curve);
                street[Convert.ToInt16(x_curve)].X2 = x_offset + grid - Convert.ToInt16(x_curve);
                street[Convert.ToInt16(x_curve)].Y1 = y_offset;
                street[Convert.ToInt16(x_curve)].Y2 = y_offset - Convert.ToInt16(y_curve); ;

                street[Convert.ToInt16(x_curve)].StrokeThickness = 2;
                myCanvas.Children.Add(street[Convert.ToInt16(x_curve)]);

            }
        }
        public void curve_90Degree(double x_offset, double y_offset, double grid)
        {
            double x_curve = 0;
            double y_curve = 0;

            x_offset = x_offset * grid;
            y_offset = y_offset * grid + grid;

            for (x_curve = 0; x_curve <= grid; x_curve++)
            {
                y_curve = Math.Sqrt(Math.Pow(grid, 2) - Math.Pow(x_curve, 2));

                Line[] street = new Line[Convert.ToInt16(grid) + 1];
                street[Convert.ToInt16(x_curve)] = new Line() { Name = "street" + Convert.ToInt16(x_curve) };
                street[Convert.ToInt16(x_curve)].Stroke = Brushes.Gray;
                street[Convert.ToInt16(x_curve)].X1 = x_offset + Convert.ToInt16(x_curve); ;
                street[Convert.ToInt16(x_curve)].X2 = x_offset + Convert.ToInt16(x_curve);
                street[Convert.ToInt16(x_curve)].Y1 = y_offset;
                street[Convert.ToInt16(x_curve)].Y2 = y_offset - Convert.ToInt16(y_curve); ;

                street[Convert.ToInt16(x_curve)].StrokeThickness = 2;
                myCanvas.Children.Add(street[Convert.ToInt16(x_curve)]);

            }
        }
        public void curve_180Degree(double x_offset, double y_offset, double grid)
        {
            double x_curve = 0;
            double y_curve = 0;

            x_offset = x_offset * grid;
            y_offset = y_offset * grid;

            for (x_curve = 0; x_curve <= grid; x_curve++)
            {
                y_curve = Math.Sqrt(Math.Pow(grid, 2) - Math.Pow(x_curve, 2));

                Line[] street = new Line[Convert.ToInt16(grid) + 1];
                street[Convert.ToInt16(x_curve)] = new Line() { Name = "street" + Convert.ToInt16(x_curve) };
                street[Convert.ToInt16(x_curve)].Stroke = Brushes.Gray;
                street[Convert.ToInt16(x_curve)].X1 = x_offset + Convert.ToInt16(x_curve);
                street[Convert.ToInt16(x_curve)].X2 = x_offset + Convert.ToInt16(x_curve);
                street[Convert.ToInt16(x_curve)].Y1 = y_offset;
                street[Convert.ToInt16(x_curve)].Y2 = y_offset + Convert.ToInt16(y_curve); ;

                street[Convert.ToInt16(x_curve)].StrokeThickness = 2;
                myCanvas.Children.Add(street[Convert.ToInt16(x_curve)]);

            }
        }
        public void curve_270Degree(double x_offset, double y_offset, double grid)
        {
            double x_curve = 0;
            double y_curve = 0;

            x_offset = x_offset * grid;
            y_offset = y_offset * grid;

            for (x_curve = 0; x_curve <= grid; x_curve++)
            {
                y_curve = Math.Sqrt(Math.Pow(grid, 2) - Math.Pow(x_curve, 2));

                Line[] street = new Line[Convert.ToInt16(grid) + 1];
                street[Convert.ToInt16(x_curve)] = new Line() { Name = "street" + Convert.ToInt16(x_curve) };
                street[Convert.ToInt16(x_curve)].Stroke = Brushes.Gray;
                street[Convert.ToInt16(x_curve)].X1 = x_offset + grid - Convert.ToInt16(x_curve);
                street[Convert.ToInt16(x_curve)].X2 = x_offset + grid - Convert.ToInt16(x_curve);
                street[Convert.ToInt16(x_curve)].Y1 = y_offset;
                street[Convert.ToInt16(x_curve)].Y2 = y_offset + Convert.ToInt16(y_curve); ;

                street[Convert.ToInt16(x_curve)].StrokeThickness = 2;
                myCanvas.Children.Add(street[Convert.ToInt16(x_curve)]);

            }
        }




                        /*
                        for (double X = 0; X < Screen_Width / gird; X++)
                        {
                            for (double Y = 0; Y < Screen_Height / gird; Y++)
                            {
                                draw_road(X, Y, gird);
                            }
                        }*/
