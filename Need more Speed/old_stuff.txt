
            //Dictionary<string, Draw_road> road_planner = new Dictionary<string, Draw_road>();



            /*
            MediaElement background_sound = new MediaElement();

            Backgroundsound.LoadedBehavior = System.Windows.Controls.MediaState.Manual;
            Backgroundsound.Play();*/

            //Backgroundsound.

            //Path source_background_sound = new Path();


            /*string startPath = @"C:\Benutzer\";//Der absolute Ausgangspfad
            string relative = @"..\Windows\explorer.exe";//Der relative Pfad
            string st4ring = @"..\Windows\explorer.exe";//Der relative Pfad
            string absolut = Path.GetFullPath(Path.Combine(startPath, relative));//Die ermittlung eines absoluten Pfades*/
            /*
            background_sound.Source = new Uri("Need-more-Speed/Julien Bam - Ready to fight(prod. by Vincent Lee).mp3", UriKind.Relative); //@"C:\Users\Marcel Vögeli\source\repos\marti2000\Need-more-Speed";//"..//Need-more-Speed//Julien Bam - Ready to fight(prod. by Vincent Lee).mp3";

            background_sound.LoadedBehavior = System.Windows.Controls.MediaState.Manual;

            background_sound.Volume = 100;

            background_sound.Play();

            Uri source = new Uri(@"Need-more-Speed/Julien Bam - Ready to fight(prod. by Vincent Lee).mp3", UriKind.Relative);

            

            MediaElement test = new MediaElement();
            test.Source = new Uri(@"C:\Users\Marcel Vögeli\source\repos\marti2000\Need-more-Speed\Julien Bam - Ready to fight(prod. by Vincent Lee).mp3");//@"C:\Users\Marcel Vögeli\source\repos\marti2000\Need-more-Speed\Julien Bam - Ready to fight(prod. by Vincent Lee).mp3";
            //(new Uri("Need-more-Speed/Julien Bam - Ready to fight(prod. by Vincent Lee).mp3", UriKind.RelativeOrAbsolute)new Uri(source.AbsoluteUri));*/
            //Path.GetFullPath((new Uri(absolute_path)).LocalPath);
            //test.Load();
            /*test.LoadedBehavior = System.Windows.Controls.MediaState.Manual;
            test.Play();*/
            /*
            Road.curve_0Degree(1, 1, 100);
            Road.curve_90Degree(2, 1, 100);
            Road.curve_180Degree(2, 2, 100);
            Road.curve_270Degree(1, 2, 100);

            Road.straight_horizontal(3, 3, 100);
            */
            /*
            road_planner.Add("straight.horizontal", Road); 
            road_planner.Add("straight.vertical", Road);
            road_planner.Add("curve.0Degree", Road);
            road_planner.Add("curve.90Degree", Road);
            road_planner.Add("curve.180Degree", Road);
            road_planner.Add("curve.270Degree", Road);*/




            /*red_car.Position_x = 200;
            red_car.Position_y = 200;
            red_car.Left = true;
            red_car.Down = true;*/





            //int tester = road_planner["straight.horizontal"];
            /*
            for(int i = 0; i>10; i++)
            {
                Line[] street = new Line[10];
                street[i] = new Line() { Name = "street" + i };
                street[i].Stroke = Brushes.Gray;
                street[i].X1 = 1;
                street[i].X2 = 50;
                street[i].Y1 = 1; 
                street[i].Y2 = 50;

                street[i].StrokeThickness = 2;
                racingtrack.Children.Add(street[i]);
            }*/


            /*SolidColorBrush street = new SolidColorBrush(Color.FromArgb(255, 0, 0, 0));
            Pen pen = new Pen(street, 10);
            Background. .DrawLine(pen, 20, 10, 300, 100);*/



            /*street.X1 = 10;
            street.X2 = 50;
            street.Y1 = 10;
            street.Y2 = 50;

            street.StrokeThickness = 2;
            racingtrack.Children.Add(street);*/

			/*
                    int.TryParse(Read_app_data("Millisecondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                    if (((result > time.Seconds) || (result == 0)) && (end_race_player_1))
                    {
                        int.TryParse(Read_app_data("Secondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                        if (((result >= time.Seconds) || (result == 0)) && (end_race_player_1))
                        {
                            int.TryParse(Read_app_data("Minutes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                            if (((result >= time.Minutes)) && (end_race_player_1))
                            {
                                /*int.TryParse(Read_app_data("Minutes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                                if (((result >= time.Minutes)) && (end_race_player_1))
                                {
                                    int.TryParse(Read_app_data("Secondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                                    if (((result >= time.Seconds) || (result == 0)) && (end_race_player_1))
                                    {
                                        int.TryParse(Read_app_data("Millisecondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                                        if (((result > time.Seconds) || (result == 0)) && (end_race_player_1))
                                        {*/



/*
                for (int counter_ = 1; counter_ <= 10; counter_++)
                {

                    int result;
                    int result1;
                    int result2;
                    /*
                    int.TryParse(Read_app_data("Millisecondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result);
                    int.TryParse(Read_app_data("Secondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result1);
                    int.TryParse(Read_app_data("Minutes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString()), out result2);

                    TimeSpan old_best = new TimeSpan(0, 0, result2, result1, result);

                    if (((time.Ticks < old_best.Ticks) || (old_best.Ticks == 0)) && (time.Ticks > 0))
                    {
                        name_box = new Name_box();
                                name_box.Show();
                                name_box.set_player_and_place(2, counter_);

                                while (name_box.value_ready == false)
                                {
                                    this.Hide();
                                    await Task.Delay(300);
                                }
                                //sort by the best time
                                if (counter_ < 10)
                                {
                                    for (int _counter_ = 9; _counter_ >= counter_; _counter_--)
                                    {
                                
                                        Write_app_storage("Name_TOP_" + (_counter_ + 1).ToString() + "_" + choseed_map.ToString(), Read_app_data("Name_TOP_" + _counter_.ToString() + "_" + choseed_map.ToString()));
                                        Write_app_storage("Minutes_TOP_" + (_counter_ + 1).ToString() + "_" + choseed_map.ToString(), Read_app_data("Minutes_TOP_" + _counter_.ToString() + "_" + choseed_map.ToString()));
                                        Write_app_storage("Secondes_TOP_" + (_counter_ + 1).ToString() + "_" + choseed_map.ToString(), Read_app_data("Secondes_TOP_" + _counter_.ToString() + "_" + choseed_map.ToString()));
                                        Write_app_storage("Millisecondes_TOP_" + (_counter_ + 1).ToString() + "_" + choseed_map.ToString(), Read_app_data("Millisecondes_TOP_" + _counter_.ToString() + "_" + choseed_map.ToString()));
                                        
                                    }
                                }

                                
                                Write_app_storage("Name_TOP_" + counter_.ToString() + "_" + choseed_map.ToString(), name_box.name_of_player);
                                Write_app_storage("Minutes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString(), time.Minutes.ToString());
                                Write_app_storage("Secondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString(), time.Seconds.ToString());
                                Write_app_storage("Millisecondes_TOP_" + counter_.ToString() + "_" + choseed_map.ToString(), time.Milliseconds.ToString());
                                

                                name_box.Close();
                                this.Show();
                                counter_ = 11;
                    }
                }*/



				add_road(2, 1, Straight_horizontal);
                        add_road(3, 1, Straight_horizontal);
                        add_road(7, 1, Straight_horizontal);
                        add_road(8, 1, Straight_horizontal);
                        add_road(9, 1, Straight_horizontal);
                        add_road(10, 1, Straight_horizontal);
                        add_road(10, 5, Straight_horizontal);
                        add_road(6, 5, Straight_horizontal);
                        add_road(2, 5, Straight_horizontal);

                        add_road(11, 3, Straight_vertical);
                        add_road(11, 4, Straight_vertical);
                        add_road(9, 4, Straight_vertical);
                        add_road(7, 4, Straight_vertical);
                        add_road(1, 4, Straight_vertical);
                        add_road(1, 2, Straight_vertical);

                        add_road(1, 3, Straight_vertical_finish);

                        add_road(11, 2, Straight_vertical_checkpoint);

                        add_road(8, 3, Straight_horizontal_checkpoint);
                        add_road(5, 2, Straight_horizontal_checkpoint);
                        add_road(4, 4, Straight_horizontal_checkpoint);

                        add_road(1, 1, Curve_0Degree);
                        add_road(6, 1, Curve_0Degree);
                        add_road(7, 3, Curve_0Degree);
                        add_road(3, 4, Curve_0Degree);

                        add_road(4, 1, Curve_90Degree);
                        add_road(11, 1, Curve_90Degree);
                        add_road(9, 3, Curve_90Degree);
                        add_road(5, 4, Curve_90Degree);

						add_road(6, 2, Curve_180Degree);
                        add_road(11, 5, Curve_180Degree);
                        add_road(7, 5, Curve_180Degree);
                        add_road(3, 5, Curve_180Degree);

                        add_road(4, 2, Curve_270Degree);
                        add_road(9, 5, Curve_270Degree);
                        add_road(5, 5, Curve_270Degree);
                        add_road(1, 5, Curve_270Degree);